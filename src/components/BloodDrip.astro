---
export interface Props {
  className?: string;
  streamCount?: number;
  intensity?: 'light' | 'medium' | 'heavy';
}

const { 
  className = '',
  streamCount = 3,
  intensity = 'medium'
} = Astro.props;

const intensityConfig = {
  light: { dropletCount: 3, speed: 8, opacity: 0.6 },
  medium: { dropletCount: 5, speed: 6, opacity: 0.8 },
  heavy: { dropletCount: 8, speed: 4, opacity: 0.9 }
};

const config = intensityConfig[intensity];

// Calculate stream positions - left at edge, right nearly centered
const getStreamPosition = (index: number) => {
  // Left stream at 20%, right stream nearly centered at 65%
  return index === 0 ? '20%' : '65%';
};
---

<div class={`blood-container ${className}`} data-intensity={intensity}>
  <!-- Multiple Blood Streams -->
  {Array.from({ length: streamCount }, (_, streamIndex) => (
    <div 
      class="blood-stream" 
      data-stream={streamIndex}
      style={`--stream-delay: ${streamIndex * 8}s; --stream-position: ${getStreamPosition(streamIndex)};`}
    >
      <!-- Source/ceiling stain -->
      <div class="blood-source"></div>
      
      <!-- Main drip stream -->
      <div class="drip-stream"></div>
      
      <!-- Splatter at bottom -->
      <div class="blood-splatter"></div>
    </div>
  ))}
</div>

<style>
  .blood-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    z-index: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .blood-stream {
    position: absolute;
    top: 0;
    left: var(--stream-position);
    width: 12px;
    height: 100%;
    animation-delay: var(--stream-delay);
    transform: translateX(-50%);
  }

  .blood-source {
    position: absolute;
    top: -5px;
    left: 50%;
    transform: translateX(-50%);
    width: 16px;
    height: 8px;
    background: radial-gradient(
      ellipse at center,
      #e90000 0%,
      #490000 60%,
      transparent 100%
    );
    border-radius: 50%;
    filter: blur(1px);
    animation: source-pulse 6s ease-in-out infinite;
  }

  .drip-stream {
    position: absolute;
    top: 3px;
    left: 50%;
    transform: translateX(-50%);
    width: 2px;
    height: 0;
    background: linear-gradient(
      to bottom,
      #e90000 0%,
      #8b0000 40%,
      #490000 80%,
      #2a0000 100%
    );
    border-radius: 0 0 50% 50%;
    animation: stream-grow 45s ease-out forwards;
    animation-delay: var(--stream-delay);
    box-shadow: 
      0 0 4px rgba(233, 0, 0, 0.5),
      inset 1px 0 0 rgba(255, 100, 100, 0.2);
    clip-path: polygon(40% 0%, 60% 0%, 100% 100%, 0% 100%);
  }

  /* Removed droplet styles */

  .blood-splatter {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 30px;
    height: 6px;
    background: radial-gradient(
      ellipse at center,
      #8b0000 0%,
      #490000 50%,
      transparent 80%
    );
    border-radius: 50%;
    opacity: 0;
    animation: splatter-grow 45s ease-out forwards;
    animation-delay: calc(var(--stream-delay) + 20s);
  }

  /* Removed ambient drops */

  /* Animations */
  @keyframes source-pulse {
    0%, 90% {
      transform: translateX(-50%) scale(1);
      opacity: 0.6;
    }
    5%, 15% {
      transform: translateX(-50%) scale(1.2);
      opacity: 0.9;
    }
  }

  @keyframes stream-grow {
    0% {
      height: 0;
      opacity: 0;
      width: 2px;
      clip-path: polygon(45% 0%, 55% 0%, 100% 100%, 0% 100%);
    }
    20% {
      height: 15vh;
      opacity: 0.4;
      width: 2px;
      clip-path: polygon(42% 0%, 58% 0%, 100% 100%, 0% 100%);
    }
    40% {
      height: 35vh;
      opacity: 0.6;
      width: 3px;
      clip-path: polygon(40% 0%, 60% 0%, 95% 100%, 5% 100%);
    }
    60% {
      height: 55vh;
      opacity: 0.75;
      width: 4px;
      clip-path: polygon(38% 0%, 62% 0%, 90% 100%, 10% 100%);
    }
    80% {
      height: 75vh;
      opacity: 0.85;
      width: 5px;
      clip-path: polygon(35% 0%, 65% 0%, 85% 100%, 15% 100%);
    }
    100% {
      height: 90vh;
      opacity: 0.9;
      width: 6px;
      clip-path: polygon(30% 0%, 70% 0%, 80% 100%, 20% 100%);
    }
  }

  /* Removed droplet animation */

  @keyframes splatter-grow {
    0%, 60% {
      opacity: 0;
      transform: translateX(-50%) scale(0);
    }
    70% {
      opacity: 0.7;
      transform: translateX(-50%) scale(0.8);
    }
    85% {
      opacity: 0.5;
      transform: translateX(-50%) scale(1.1);
    }
    100% {
      opacity: 0.3;
      transform: translateX(-50%) scale(1.3);
    }
  }

  /* Removed ambient fall animation */

  /* Intensity variations */
  .blood-container[data-intensity="light"] {
    opacity: 0.6;
  }

  .blood-container[data-intensity="light"] .drip-stream {
    animation-duration: 60s;
  }

  /* Removed droplet intensity variations */

  .blood-container[data-intensity="heavy"] {
    opacity: 0.95;
  }

  .blood-container[data-intensity="heavy"] .drip-stream {
    animation-duration: 4s;
    width: 4px;
  }

  .blood-container[data-intensity="heavy"] .drip-stream {
    animation-duration: 30s;
    width: 3px;
  }

  .blood-container[data-intensity="heavy"] .blood-source {
    width: 20px;
    height: 10px;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .blood-stream {
      width: 6px;
    }
    
    .blood-container[data-intensity="heavy"] .drip-stream {
      width: 3px;
    }
    
    .blood-source {
      width: 12px;
      height: 6px;
    }
  }

  /* Accessibility - respect reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .blood-container * {
      animation-duration: 0s !important;
      animation: none !important;
    }
    
    .blood-container {
      opacity: 0.3;
    }
    
    .drip-stream {
      height: 30px;
      opacity: 0.5;
    }
  }

  /* Subtle screen distortion effect when blood is active */
  .blood-container:hover ~ * {
    filter: hue-rotate(1deg) brightness(0.99);
    transition: filter 0.3s ease;
  }
</style>

<script>
  class BloodDrip {
    constructor(element: HTMLElement) {
      this.element = element;
      this.intensity = element.dataset.intensity || 'medium';
      this.isActive = false;
      this.init();
    }

    private element: HTMLElement;
    private intensity: string;
    private isActive: boolean;
    private randomInterval: number | null = null;

    init() {
      this.startRandomIntensification();
      this.setupVisibilityTrigger();
    }

    private startRandomIntensification() {
      const intensify = () => {
        if (Math.random() > 0.85) {
          this.element.style.filter = 'brightness(1.2) saturate(1.3)';
          setTimeout(() => {
            this.element.style.filter = '';
          }, 2000);
        }
        
        const nextInterval = Math.random() * 15000 + 10000;
        this.randomInterval = window.setTimeout(intensify, nextInterval);
      };

      intensify();
    }

    private setupVisibilityTrigger() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.activate();
            } else {
              this.deactivate();
            }
          });
        },
        { threshold: 0.1 }
      );

      observer.observe(this.element);
    }

    private activate() {
      this.isActive = true;
      this.element.style.animationPlayState = 'running';
    }

    private deactivate() {
      this.isActive = false;
      this.element.style.animationPlayState = 'paused';
    }

    destroy() {
      if (this.randomInterval) {
        clearTimeout(this.randomInterval);
      }
    }
  }

  // Initialize blood drip effects
  document.addEventListener('DOMContentLoaded', () => {
    const bloodContainers = document.querySelectorAll<HTMLElement>('.blood-container');
    bloodContainers.forEach(container => {
      new BloodDrip(container);
    });
  });

  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', () => {
    const bloodContainers = document.querySelectorAll<HTMLElement>('.blood-container');
    bloodContainers.forEach(container => {
      new BloodDrip(container);
    });
  });
</script>